generator client {
  provider        = "prisma-client-js"
  output          = "../../node_modules/.prisma/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL") 
  extensions = [vector]
}

enum UploadFileEnum {
  PDF
  JPEG
  PNG
}

model Upload {
  id         Int            @id @default(autoincrement())
  url        String
  format     String
  s3FileKey  String
  fileName   String
  uploads_of Session?       @relation(fields: [session_id], references: [id])
  session_id Int?
  created_by User           @relation(fields: [user_id], references: [id])
  user_id    Int
  created_at DateTime       @default(now())
}

model Embeddings {
  id         Int                         @id @default(autoincrement())
  text       String
  embedding  Unsupported("vector(1536)")
  uploads_of Session?                    @relation(fields: [session_id], references: [id])
  session_id Int?
  created_by User                        @relation(fields: [user_id], references: [id])
  user_id    Int
  created_at DateTime                    @default(now())
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  name           String
  username       String       @unique
  profile_img_id Int?
  password       String
  created_at     DateTime     @default(now())
  Session        Session[]
  uploads        Upload[]
  Embeddings     Embeddings[]
}

enum PostStatusEnum {
  PUBLIC
  PRIVATE
}

model Session {
  id         Int            @id @default(autoincrement())
  body       String
  user_id    Int
  visiblity  PostStatusEnum @default(PUBLIC)
  created_by User           @relation(fields: [user_id], references: [id])
  created_at DateTime       @default(now())
  updated_at DateTime       @default(now())
  Upload     Upload[]
  Embeddings Embeddings[]
}
